/**
 * LeetCode 103: Binary Tree Zigzag Level Order Traversal
 * 
 * This program implements a zigzag (spiral) level order traversal of a binary tree.
 * At each level, the traversal direction alternates:
 * - Level 0 (root): left to right
 * - Level 1: right to left
 * - Level 2: left to right
 * - And so on...
 * 
 * The implementation uses two stacks to efficiently handle the alternating traversal direction.
 */

 #include <iostream>
 #include <vector>
 #include <stack>
 
 using namespace std;
 
 // Definition for a binary tree node
 struct TreeNode {
     int val;
     TreeNode *left;
     TreeNode *right;
     TreeNode() : val(0), left(nullptr), right(nullptr) {}
     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 };
 
 class Solution {
 public:
     vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
         vector<vector<int>> ans;
         
         // Handle empty tree case
         if (root == nullptr) return ans;
 
         // s1 used for left-to-right levels (odd levels)
         stack<TreeNode*> s1;
         
         // s2 used for right-to-left levels (even levels)
         stack<TreeNode*> s2;
 
         // Start with the root in s1
         s1.push(root);
 
         // Continue until both stacks are empty
         while(!s1.empty() || !s2.empty()) {
             
             // Process nodes in s1 (traversal: left to right)
             if (!s1.empty()) {
                 int size = s1.size();  // Number of nodes at this level
                 vector<int> level;  // Store values for this level
                 
                 for (int i = 0; i < size; i++) {
                     // Get the current node
                     TreeNode* temp = s1.top();
                     s1.pop();
 
                     // Skip null nodes (safety check)
                     if(!temp) continue;
                     
                     // Add current node's value to this level
                     level.push_back(temp->val);
 
                     // Add children to s2 for next level (right-to-left traversal)
                     // Note: We push left first, then right
                     // This ensures right will be processed first in the next level (LIFO property of stack)
                     if(temp->left) s2.push(temp->left);
                     if(temp->right) s2.push(temp->right);
                 }
                 
                 // Add this level's values to the result
                 ans.push_back(level);
             }
 
             // Process nodes in s2 (traversal: right to left)
             if (!s2.empty()) {
                 int size = s2.size();  // Number of nodes at this level
                 vector<int> level;  // Store values for this level
 
                 for (int i = 0; i < size; i++) {
                     // Get the current node
                     TreeNode* temp = s2.top();
                     s2.pop();
 
                     // Skip null nodes (safety check)
                     if(!temp) continue;
                     
                     // Add current node's value to this level
                     level.push_back(temp->val);
 
                     // Add children to s1 for next level (left-to-right traversal)
                     // Note: We push right first, then left
                     // This ensures left will be processed first in the next level (LIFO property of stack)
                     if(temp->right) s1.push(temp->right);
                     if(temp->left) s1.push(temp->left);
                 }
                 
                 // Add this level's values to the result
                 ans.push_back(level);
             }
         }
         
         return ans;
     }
 };
 
 // Helper function to create a sample binary tree for testing
 TreeNode* createSampleTree() {
     /*
         1
        / \
       2   3
      / \   \
     4   5   6
     */
     TreeNode* root = new TreeNode(1);
     root->left = new TreeNode(2);
     root->right = new TreeNode(3);
     root->left->left = new TreeNode(4);
     root->left->right = new TreeNode(5);
     root->right->right = new TreeNode(6);
     return root;
 }
 
 // Helper function to print the result
 void printResult(const vector<vector<int>>& result) {
     cout << "Zigzag Level Order Traversal: " << endl;
     for (size_t i = 0; i < result.size(); i++) {
         cout << "Level " << i << ": [";
         for (size_t j = 0; j < result[i].size(); j++) {
             cout << result[i][j];
             if (j < result[i].size() - 1) cout << ", ";
         }
         cout << "]" << endl;
     }
 }
 
 // Helper function to deallocate the tree
 void deleteTree(TreeNode* root) {
     if (root == nullptr) return;
     deleteTree(root->left);
     deleteTree(root->right);
     delete root;
 }
 
 int main() {
     // Create a sample binary tree
     TreeNode* root = createSampleTree();
     
     // Execute the zigzag level order traversal
     Solution solution;
     vector<vector<int>> result = solution.zigzagLevelOrder(root);
     
     // Print the result
     printResult(result);
     
     // Clean up memory
     deleteTree(root);
     
     return 0;
 }